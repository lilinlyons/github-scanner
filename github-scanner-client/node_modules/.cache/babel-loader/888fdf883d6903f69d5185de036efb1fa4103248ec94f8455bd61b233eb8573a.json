{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { assertWrappedQueryRef, getSuspenseCache, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef } from \"../internal/index.js\";\nimport { useRenderGuard, useWarnRemovedOption } from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { muteDeprecations } from \"../../utilities/deprecation/index.js\";\nexport function useLoadableQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  if (globalThis.__DEV__ !== false) {\n    // eslint-disable-next-line react-compiler/react-compiler, react-hooks/rules-of-hooks\n    useWarnRemovedOption(options, \"canonizeResults\", \"useLoadableQuery\");\n  }\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client: client,\n    query: query,\n    options: options\n  });\n  var _a = options.queryKey,\n    queryKey = _a === void 0 ? [] : _a;\n  var _b = React.useState(null),\n    queryRef = _b[0],\n    setQueryRef = _b[1];\n  assertWrappedQueryRef(queryRef);\n  var internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n  if (queryRef && (internalQueryRef === null || internalQueryRef === void 0 ? void 0 : internalQueryRef.didChangeOptions(watchQueryOptions))) {\n    var promise = internalQueryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(queryRef, promise);\n  }\n  var calledDuringRender = useRenderGuard();\n  var fetchMore = React.useCallback(function (options) {\n    if (!internalQueryRef) {\n      throw new Error(\"The query has not been loaded. Please load the query.\");\n    }\n    var promise = internalQueryRef.fetchMore(options);\n    setQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  var refetch = React.useCallback(function (options) {\n    if (!internalQueryRef) {\n      throw new Error(\"The query has not been loaded. Please load the query.\");\n    }\n    var promise = internalQueryRef.refetch(options);\n    setQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  var loadQuery = React.useCallback(function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    invariant(!calledDuringRender(), 82);\n    var variables = args[0];\n    var cacheKey = __spreadArray([query, canonicalStringify(variables)], [].concat(queryKey), true);\n    var queryRef = muteDeprecations(\"canonizeResults\", function () {\n      return suspenseCache.getQueryRef(cacheKey, function () {\n        return client.watchQuery(__assign(__assign({}, watchQueryOptions), {\n          variables: variables\n        }));\n      });\n    });\n    setQueryRef(wrapQueryRef(queryRef));\n  }, [query, queryKey, suspenseCache, watchQueryOptions, calledDuringRender, client]);\n  var subscribeToMore = React.useCallback(function (options) {\n    invariant(internalQueryRef, 83);\n    return internalQueryRef.observable.subscribeToMore(\n    // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n    options);\n  }, [internalQueryRef]);\n  var reset = React.useCallback(function () {\n    setQueryRef(null);\n  }, []);\n  return [loadQuery, queryRef, {\n    fetchMore: fetchMore,\n    refetch: refetch,\n    reset: reset,\n    subscribeToMore: subscribeToMore\n  }];\n}","map":{"version":3,"names":["React","useApolloClient","assertWrappedQueryRef","getSuspenseCache","unwrapQueryRef","updateWrappedQueryRef","wrapQueryRef","useRenderGuard","useWarnRemovedOption","useWatchQueryOptions","canonicalStringify","invariant","muteDeprecations","useLoadableQuery","query","options","Object","create","globalThis","__DEV__","client","suspenseCache","watchQueryOptions","_a","queryKey","_b","useState","queryRef","setQueryRef","internalQueryRef","didChangeOptions","promise","applyOptions","calledDuringRender","fetchMore","useCallback","Error","refetch","loadQuery","args","_i","arguments","length","variables","cacheKey","__spreadArray","concat","getQueryRef","watchQuery","__assign","subscribeToMore","observable","reset"],"sources":["/Users/lililyons/WebstormProjects/github-scanner/github-scanner-client/node_modules/@apollo/src/react/hooks/useLoadableQuery.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type {\n  DocumentNode,\n  FetchMoreQueryOptions,\n  OperationVariables,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport type {\n  SubscribeToMoreFunction,\n  SubscribeToMoreOptions,\n} from \"../../core/watchQueryOptions.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  assertWrappedQueryRef,\n  getSuspenseCache,\n  unwrapQueryRef,\n  updateWrappedQueryRef,\n  wrapQueryRef,\n} from \"../internal/index.js\";\nimport type { CacheKey, QueryRef } from \"../internal/index.js\";\nimport type { LoadableQueryHookOptions } from \"../types/types.js\";\nimport {\n  __use,\n  useRenderGuard,\n  useWarnRemovedOption,\n} from \"./internal/index.js\";\nimport { useWatchQueryOptions } from \"./useSuspenseQuery.js\";\nimport type { FetchMoreFunction, RefetchFunction } from \"./useSuspenseQuery.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport type {\n  DeepPartial,\n  OnlyRequiredProperties,\n} from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { muteDeprecations } from \"../../utilities/deprecation/index.js\";\n\nexport type LoadQueryFunction<TVariables extends OperationVariables> = (\n  // Use variadic args to handle cases where TVariables is type `never`, in\n  // which case we don't want to allow a variables argument. In other\n  // words, we don't want to allow variables to be passed as an argument to this\n  // function if the query does not expect variables in the document.\n  ...args: [TVariables] extends [never] ? []\n  : {} extends OnlyRequiredProperties<TVariables> ? [variables?: TVariables]\n  : [variables: TVariables]\n) => void;\n\ntype ResetFunction = () => void;\n\nexport type UseLoadableQueryResult<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n> = [\n  loadQuery: LoadQueryFunction<TVariables>,\n  queryRef: QueryRef<TData, TVariables> | null,\n  handlers: {\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#fetchMore:member} */\n    fetchMore: FetchMoreFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!QueryResultDocumentation#refetch:member} */\n    refetch: RefetchFunction<TData, TVariables>;\n    /** {@inheritDoc @apollo/client!ObservableQuery#subscribeToMore:member(1)} */\n    subscribeToMore: SubscribeToMoreFunction<TData, TVariables>;\n    /**\n     * A function that resets the `queryRef` back to `null`.\n     */\n    reset: ResetFunction;\n  },\n];\n\nexport function useLoadableQuery<\n  TData,\n  TVariables extends OperationVariables,\n  TOptions extends LoadableQueryHookOptions,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LoadableQueryHookOptions & TOptions\n): UseLoadableQueryResult<\n  TOptions[\"errorPolicy\"] extends \"ignore\" | \"all\" ?\n    TOptions[\"returnPartialData\"] extends true ?\n      DeepPartial<TData> | undefined\n    : TData | undefined\n  : TOptions[\"returnPartialData\"] extends true ? DeepPartial<TData>\n  : TData,\n  TVariables\n>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    returnPartialData: true;\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseLoadableQueryResult<DeepPartial<TData> | undefined, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    errorPolicy: \"ignore\" | \"all\";\n  }\n): UseLoadableQueryResult<TData | undefined, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions & {\n    returnPartialData: true;\n  }\n): UseLoadableQueryResult<DeepPartial<TData>, TVariables>;\n\n/**\n * A hook for imperatively loading a query, such as responding to a user\n * interaction.\n *\n * > Refer to the [Suspense - Fetching in response to user interaction](https://www.apollographql.com/docs/react/data/suspense#fetching-in-response-to-user-interaction) section for a more in-depth overview of `useLoadableQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLoadableQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function App() {\n *   const [loadGreeting, queryRef] = useLoadableQuery(GET_GREETING);\n *\n *   return (\n *     <>\n *       <button onClick={() => loadGreeting({ language: \"english\" })}>\n *         Load greeting\n *       </button>\n *       <Suspense fallback={<div>Loading...</div>}>\n *         {queryRef && <Hello queryRef={queryRef} />}\n *       </Suspense>\n *     </>\n *   );\n * }\n *\n * function Hello({ queryRef }) {\n *   const { data } = useReadQuery(queryRef);\n *\n *   return <div>{data.greeting.message}</div>;\n * }\n * ```\n *\n * @since 3.9.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns A tuple in the form of `[loadQuery, queryRef, handlers]`\n */\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LoadableQueryHookOptions\n): UseLoadableQueryResult<TData, TVariables>;\n\nexport function useLoadableQuery<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: LoadableQueryHookOptions = Object.create(null)\n): UseLoadableQueryResult<TData, TVariables> {\n  if (__DEV__) {\n    // eslint-disable-next-line react-compiler/react-compiler, react-hooks/rules-of-hooks\n    useWarnRemovedOption(options, \"canonizeResults\", \"useLoadableQuery\");\n  }\n\n  const client = useApolloClient(options.client);\n  const suspenseCache = getSuspenseCache(client);\n  const watchQueryOptions = useWatchQueryOptions({ client, query, options });\n  const { queryKey = [] } = options;\n\n  const [queryRef, setQueryRef] = React.useState<QueryRef<\n    TData,\n    TVariables\n  > | null>(null);\n\n  assertWrappedQueryRef(queryRef);\n\n  const internalQueryRef = queryRef && unwrapQueryRef(queryRef);\n\n  if (queryRef && internalQueryRef?.didChangeOptions(watchQueryOptions)) {\n    const promise = internalQueryRef.applyOptions(watchQueryOptions);\n    updateWrappedQueryRef(queryRef, promise);\n  }\n\n  const calledDuringRender = useRenderGuard();\n\n  const fetchMore: FetchMoreFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.fetchMore(\n        options as FetchMoreQueryOptions<TVariables, TData>\n      );\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const refetch: RefetchFunction<TData, TVariables> = React.useCallback(\n    (options) => {\n      if (!internalQueryRef) {\n        throw new Error(\n          \"The query has not been loaded. Please load the query.\"\n        );\n      }\n\n      const promise = internalQueryRef.refetch(options);\n\n      setQueryRef(wrapQueryRef(internalQueryRef));\n\n      return promise;\n    },\n    [internalQueryRef]\n  );\n\n  const loadQuery: LoadQueryFunction<TVariables> = React.useCallback(\n    (...args) => {\n      invariant(\n        !calledDuringRender(),\n        \"useLoadableQuery: 'loadQuery' should not be called during render. To start a query during render, use the 'useBackgroundQuery' hook.\"\n      );\n\n      const [variables] = args;\n\n      const cacheKey: CacheKey = [\n        query,\n        canonicalStringify(variables),\n        ...([] as any[]).concat(queryKey),\n      ];\n\n      const queryRef = muteDeprecations(\"canonizeResults\", () =>\n        suspenseCache.getQueryRef(cacheKey, () =>\n          client.watchQuery({\n            ...watchQueryOptions,\n            variables,\n          } as WatchQueryOptions<any, any>)\n        )\n      );\n\n      setQueryRef(wrapQueryRef(queryRef));\n    },\n    [\n      query,\n      queryKey,\n      suspenseCache,\n      watchQueryOptions,\n      calledDuringRender,\n      client,\n    ]\n  );\n\n  const subscribeToMore: SubscribeToMoreFunction<TData, TVariables> =\n    React.useCallback(\n      (options) => {\n        invariant(\n          internalQueryRef,\n          \"The query has not been loaded. Please load the query.\"\n        );\n\n        return internalQueryRef.observable.subscribeToMore(\n          // TODO: The internalQueryRef doesn't have TVariables' type information so we have to cast it here\n          options as any as SubscribeToMoreOptions<TData, OperationVariables>\n        );\n      },\n      [internalQueryRef]\n    );\n\n  const reset: ResetFunction = React.useCallback(() => {\n    setQueryRef(null);\n  }, []);\n\n  return [loadQuery, queryRef, { fetchMore, refetch, reset, subscribeToMore }];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}