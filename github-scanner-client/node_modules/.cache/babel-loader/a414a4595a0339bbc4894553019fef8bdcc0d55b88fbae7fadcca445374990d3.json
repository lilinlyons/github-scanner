{"ast":null,"code":"var _jsxFileName = \"/Users/lililyons/WebstormProjects/github-scanner/github-scanner-client/src/App.js\",\n  _s = $RefreshSig$();\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  // backend endpoint\n  cache: new InMemoryCache()\n});\nconst GET_REPOS = gql`\n  query {\n    listRepos {\n      name\n      url\n    }\n  }\n`;\nfunction Repos() {\n  _s();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_REPOS);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: data.listRepos.map(repo => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: repo.url,\n        children: repo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 15\n      }, this)\n    }, repo.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 7\n  }, this);\n}\n_s(Repos, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n_c = Repos;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GitHub Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Repos, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n}\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Repos\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","jsxDEV","_jsxDEV","client","uri","cache","GET_REPOS","Repos","_s","loading","error","data","children","fileName","_jsxFileName","lineNumber","columnNumber","message","listRepos","map","repo","href","url","name","_c","App","_c2","$RefreshReg$"],"sources":["/Users/lililyons/WebstormProjects/github-scanner/github-scanner-client/src/App.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\", // backend endpoint\n  cache: new InMemoryCache(),\n});\n\nconst GET_REPOS = gql`\n  query {\n    listRepos {\n      name\n      url\n    }\n  }\n`;\n\nfunction Repos() {\n  const { loading, error, data } = useQuery(GET_REPOS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n      <ul>\n        {data.listRepos.map((repo) => (\n            <li key={repo.name}>\n              <a href={repo.url}>{repo.name}</a>\n            </li>\n        ))}\n      </ul>\n  );\n}\n\nexport default function App() {\n  return (\n      <ApolloProvider client={client}>\n        <h1>GitHub Scanner</h1>\n        <Repos />\n      </ApolloProvider>\n  );\n}\n"],"mappings":";;AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,QAAQ,EAAEC,GAAG,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5F,MAAMC,MAAM,GAAG,IAAIP,YAAY,CAAC;EAC9BQ,GAAG,EAAE,+BAA+B;EAAE;EACtCC,KAAK,EAAE,IAAIR,aAAa,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAMS,SAAS,GAAGN,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASO,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGZ,QAAQ,CAACO,SAAS,CAAC;EAEpD,IAAIG,OAAO,EAAE,oBAAOP,OAAA;IAAAU,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACrC,IAAIN,KAAK,EAAE,oBAAOR,OAAA;IAAAU,QAAA,GAAG,SAAO,EAACF,KAAK,CAACO,OAAO;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAE/C,oBACId,OAAA;IAAAU,QAAA,EACGD,IAAI,CAACO,SAAS,CAACC,GAAG,CAAEC,IAAI,iBACrBlB,OAAA;MAAAU,QAAA,eACEV,OAAA;QAAGmB,IAAI,EAAED,IAAI,CAACE,GAAI;QAAAV,QAAA,EAAEQ,IAAI,CAACG;MAAI;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC,GAD3BI,IAAI,CAACG,IAAI;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEd,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEX;AAACR,EAAA,CAfQD,KAAK;EAAA,QACqBR,QAAQ;AAAA;AAAAyB,EAAA,GADlCjB,KAAK;AAiBd,eAAe,SAASkB,GAAGA,CAAA,EAAG;EAC5B,oBACIvB,OAAA,CAACJ,cAAc;IAACK,MAAM,EAAEA,MAAO;IAAAS,QAAA,gBAC7BV,OAAA;MAAAU,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBd,OAAA,CAACK,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEvB;AAACU,GAAA,GAPuBD,GAAG;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}