{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { createMakeWatchQueryOptions, getDefaultFetchPolicy, getObsQueryOptions, toQueryResult, useQueryInternals } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\nimport { useWarnRemovedOption } from \"./internal/useWarnRemovedOption.js\";\nimport { invariant } from \"../../utilities/globals/invariantWrappers.js\";\nimport { warnRemovedOption } from \"../../utilities/deprecation/index.js\";\nimport { useRenderGuard } from \"./internal/index.js\";\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nvar EAGER_METHODS = [\"refetch\", \"reobserve\", \"fetchMore\", \"updateQuery\", \"startPolling\", \"stopPolling\", \"subscribeToMore\"];\nvar REMOVED_EXECUTE_OPTIONS = [\"initialFetchPolicy\", \"onCompleted\", \"onError\", \"defaultOptions\", \"partialRefetch\", \"canonizeResults\"];\nvar DEPRECATED_EXECUTE_OPTIONS = [\"query\", \"ssr\", \"client\", \"fetchPolicy\", \"nextFetchPolicy\", \"refetchWritePolicy\", \"errorPolicy\", \"pollInterval\", \"notifyOnNetworkStatusChange\", \"returnPartialData\", \"skipPollAttempt\"];\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery(query, options) {\n  var _a;\n  if (globalThis.__DEV__ !== false) {\n    /* eslint-disable react-hooks/rules-of-hooks, react-compiler/react-compiler */\n    var warnOpts = options || {};\n    useWarnRemovedOption(warnOpts, \"canonizeResults\", \"useLazyQuery\");\n    useWarnRemovedOption(warnOpts, \"variables\", \"useLazyQuery\", \"Pass all `variables` to the returned `execute` function instead.\");\n    useWarnRemovedOption(warnOpts, \"context\", \"useLazyQuery\", \"Pass `context` to the returned `execute` function instead.\");\n    useWarnRemovedOption(warnOpts, \"onCompleted\", \"useLazyQuery\", \"If your `onCompleted` callback sets local state, switch to use derived state using `data` returned from the hook instead. Use `useEffect` to perform side-effects as a result of updates to `data`.\");\n    useWarnRemovedOption(warnOpts, \"onError\", \"useLazyQuery\", \"If your `onError` callback sets local state, switch to use derived state using `data`, `error` or `errors` returned from the hook instead. Use `useEffect` if you need to perform side-effects as a result of updates to `data`, `error` or `errors`.\");\n    useWarnRemovedOption(warnOpts, \"defaultOptions\", \"useLazyQuery\", \"Pass the options directly to the hook instead.\");\n    useWarnRemovedOption(warnOpts, \"initialFetchPolicy\", \"useLazyQuery\", \"Use the `fetchPolicy` option instead.\");\n    useWarnRemovedOption(warnOpts, \"partialRefetch\", \"useLazyQuery\");\n    /* eslint-enable react-hooks/rules-of-hooks, react-compiler/react-compiler */\n  }\n  var execOptionsRef = React.useRef(void 0);\n  var optionsRef = React.useRef(void 0);\n  var queryRef = React.useRef(void 0);\n  var merged = mergeOptions(options, execOptionsRef.current || {});\n  var document = (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query;\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n  var queryHookOptions = __assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  });\n  var _b = useQueryInternals(document, queryHookOptions),\n    obsQueryFields = _b.obsQueryFields,\n    useQueryResult = _b.result,\n    client = _b.client,\n    resultData = _b.resultData,\n    observable = _b.observable,\n    onQueryExecuted = _b.onQueryExecuted;\n  var initialFetchPolicy = observable.options.initialFetchPolicy || getDefaultFetchPolicy(queryHookOptions.defaultOptions, client.defaultOptions);\n  var forceUpdateState = React.useReducer(function (tick) {\n    return tick + 1;\n  }, 0)[1];\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  var eagerMethods = React.useMemo(function () {\n    var eagerMethods = {};\n    var _loop_1 = function (key) {\n      var method = obsQueryFields[key];\n      eagerMethods[key] = function () {\n        if (globalThis.__DEV__ !== false) {\n          if (key === \"reobserve\") {\n            globalThis.__DEV__ !== false && invariant.warn(80);\n          }\n        }\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods;\n  }, [forceUpdateState, obsQueryFields]);\n  var called = !!execOptionsRef.current;\n  var result = React.useMemo(function () {\n    return __assign(__assign(__assign({}, useQueryResult), eagerMethods), {\n      called: called\n    });\n  }, [useQueryResult, eagerMethods, called]);\n  var calledDuringRender = useRenderGuard();\n  var warnRef = React.useRef(new Set());\n  var execute = React.useCallback(function (executeOptions) {\n    if (globalThis.__DEV__ !== false) {\n      if (calledDuringRender()) {\n        globalThis.__DEV__ !== false && invariant.warn(81);\n      }\n      for (var _i = 0, REMOVED_EXECUTE_OPTIONS_1 = REMOVED_EXECUTE_OPTIONS; _i < REMOVED_EXECUTE_OPTIONS_1.length; _i++) {\n        var name_1 = REMOVED_EXECUTE_OPTIONS_1[_i];\n        if (!warnRef.current.has(name_1)) {\n          warnRemovedOption(executeOptions || {}, name_1, \"useLazyQuery.execute\");\n          warnRef.current.add(name_1);\n        }\n      }\n      for (var _a = 0, DEPRECATED_EXECUTE_OPTIONS_1 = DEPRECATED_EXECUTE_OPTIONS; _a < DEPRECATED_EXECUTE_OPTIONS_1.length; _a++) {\n        var name_2 = DEPRECATED_EXECUTE_OPTIONS_1[_a];\n        if (!warnRef.current.has(name_2)) {\n          warnRemovedOption(executeOptions || {}, name_2, \"useLazyQuery.execute\", \"Please pass the option to the `useLazyQuery` hook instead.\");\n          warnRef.current.add(name_2);\n        }\n      }\n    }\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var options = mergeOptions(optionsRef.current, __assign({\n      query: queryRef.current\n    }, execOptionsRef.current));\n    var promise = executeQuery(resultData, observable, client, document, __assign(__assign({}, options), {\n      skip: false\n    }), onQueryExecuted).then(function (queryResult) {\n      return Object.assign(queryResult, eagerMethods);\n    });\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(function () {});\n    return promise;\n  }, [calledDuringRender, client, document, eagerMethods, initialFetchPolicy, observable, resultData, onQueryExecuted]);\n  var executeRef = React.useRef(execute);\n  useIsomorphicLayoutEffect(function () {\n    executeRef.current = execute;\n  });\n  var stableExecute = React.useCallback(function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return executeRef.current.apply(executeRef, args);\n  }, []);\n  return [stableExecute, result];\n}\nfunction executeQuery(resultData, observable, client, currentQuery, options, onQueryExecuted) {\n  var query = options.query || currentQuery;\n  var watchQueryOptions = createMakeWatchQueryOptions(client, query, options, false)(observable);\n  var concast = observable.reobserveAsConcast(getObsQueryOptions(observable, client, options, watchQueryOptions));\n  onQueryExecuted(watchQueryOptions);\n  return new Promise(function (resolve) {\n    var result;\n    // Subscribe to the concast independently of the ObservableQuery in case\n    // the component gets unmounted before the promise resolves. This prevents\n    // the concast from terminating early and resolving with `undefined` when\n    // there are no more subscribers for the concast.\n    concast.subscribe({\n      next: function (value) {\n        result = value;\n      },\n      error: function () {\n        resolve(toQueryResult(observable.getCurrentResult(), resultData.previousData, observable, client));\n      },\n      complete: function () {\n        resolve(toQueryResult(observable[\"maskResult\"](result), resultData.previousData, observable, client));\n      }\n    });\n  });\n}","map":{"version":3,"names":["React","mergeOptions","createMakeWatchQueryOptions","getDefaultFetchPolicy","getObsQueryOptions","toQueryResult","useQueryInternals","useIsomorphicLayoutEffect","useWarnRemovedOption","invariant","warnRemovedOption","useRenderGuard","EAGER_METHODS","REMOVED_EXECUTE_OPTIONS","DEPRECATED_EXECUTE_OPTIONS","useLazyQuery","query","options","globalThis","__DEV__","warnOpts","execOptionsRef","useRef","optionsRef","queryRef","merged","current","document","_a","queryHookOptions","__assign","skip","_b","obsQueryFields","useQueryResult","result","client","resultData","observable","onQueryExecuted","initialFetchPolicy","defaultOptions","forceUpdateState","useReducer","tick","eagerMethods","useMemo","key","method","warn","Object","create","apply","arguments","_i","EAGER_METHODS_1","length","called","calledDuringRender","warnRef","Set","execute","useCallback","executeOptions","REMOVED_EXECUTE_OPTIONS_1","name_1","has","add","DEPRECATED_EXECUTE_OPTIONS_1","name_2","fetchPolicy","promise","executeQuery","then","queryResult","assign","catch","executeRef","stableExecute","args","currentQuery","watchQueryOptions","concast","reobserveAsConcast","Promise","resolve","subscribe","next","value","error","getCurrentResult","previousData","complete"],"sources":["/Users/lililyons/WebstormProjects/github-scanner/github-scanner-client/node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type {\n  ApolloClient,\n  ApolloQueryResult,\n  ObservableQuery,\n  OperationVariables,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryHookOptions,\n  QueryResult,\n} from \"../types/types.js\";\nimport type { InternalResult } from \"./useQuery.js\";\nimport {\n  createMakeWatchQueryOptions,\n  getDefaultFetchPolicy,\n  getObsQueryOptions,\n  toQueryResult,\n  useQueryInternals,\n} from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\nimport { useWarnRemovedOption } from \"./internal/useWarnRemovedOption.js\";\nimport { invariant } from \"../../utilities/globals/invariantWrappers.js\";\nimport { warnRemovedOption } from \"../../utilities/deprecation/index.js\";\nimport { useRenderGuard } from \"./internal/index.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"stopPolling\",\n  \"subscribeToMore\",\n] as const;\n\nconst REMOVED_EXECUTE_OPTIONS = [\n  \"initialFetchPolicy\",\n  \"onCompleted\",\n  \"onError\",\n  \"defaultOptions\",\n  \"partialRefetch\",\n  \"canonizeResults\",\n] as const satisfies Array<keyof LazyQueryHookExecOptions>;\n\nconst DEPRECATED_EXECUTE_OPTIONS = [\n  \"query\",\n  \"ssr\",\n  \"client\",\n  \"fetchPolicy\",\n  \"nextFetchPolicy\",\n  \"refetchWritePolicy\",\n  \"errorPolicy\",\n  \"pollInterval\",\n  \"notifyOnNetworkStatusChange\",\n  \"returnPartialData\",\n  \"skipPollAttempt\",\n] as const satisfies Array<\n  Exclude<\n    keyof LazyQueryHookExecOptions,\n    (typeof REMOVED_EXECUTE_OPTIONS)[number]\n  >\n>;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  if (__DEV__) {\n    /* eslint-disable react-hooks/rules-of-hooks, react-compiler/react-compiler */\n    const warnOpts = options || {};\n\n    useWarnRemovedOption(warnOpts, \"canonizeResults\", \"useLazyQuery\");\n    useWarnRemovedOption(\n      warnOpts,\n      \"variables\",\n      \"useLazyQuery\",\n      \"Pass all `variables` to the returned `execute` function instead.\"\n    );\n    useWarnRemovedOption(\n      warnOpts,\n      \"context\",\n      \"useLazyQuery\",\n      \"Pass `context` to the returned `execute` function instead.\"\n    );\n    useWarnRemovedOption(\n      warnOpts,\n      \"onCompleted\",\n      \"useLazyQuery\",\n      \"If your `onCompleted` callback sets local state, switch to use derived state using `data` returned from the hook instead. Use `useEffect` to perform side-effects as a result of updates to `data`.\"\n    );\n    useWarnRemovedOption(\n      warnOpts,\n      \"onError\",\n      \"useLazyQuery\",\n      \"If your `onError` callback sets local state, switch to use derived state using `data`, `error` or `errors` returned from the hook instead. Use `useEffect` if you need to perform side-effects as a result of updates to `data`, `error` or `errors`.\"\n    );\n    useWarnRemovedOption(\n      warnOpts,\n      \"defaultOptions\",\n      \"useLazyQuery\",\n      \"Pass the options directly to the hook instead.\"\n    );\n    useWarnRemovedOption(\n      warnOpts,\n      \"initialFetchPolicy\",\n      \"useLazyQuery\",\n      \"Use the `fetchPolicy` option instead.\"\n    );\n\n    useWarnRemovedOption(warnOpts, \"partialRefetch\", \"useLazyQuery\");\n    /* eslint-enable react-hooks/rules-of-hooks, react-compiler/react-compiler */\n  }\n\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>(void 0);\n  const optionsRef =\n    React.useRef<LazyQueryHookOptions<TData, TVariables>>(void 0);\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >(void 0);\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const queryHookOptions = {\n    ...merged,\n    skip: !execOptionsRef.current,\n  };\n  const {\n    obsQueryFields,\n    result: useQueryResult,\n    client,\n    resultData,\n    observable,\n    onQueryExecuted,\n  } = useQueryInternals(document, queryHookOptions);\n\n  const initialFetchPolicy =\n    observable.options.initialFetchPolicy ||\n    getDefaultFetchPolicy(\n      queryHookOptions.defaultOptions,\n      client.defaultOptions\n    );\n\n  const forceUpdateState = React.useReducer((tick) => tick + 1, 0)[1];\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = obsQueryFields[key];\n      eagerMethods[key] = function () {\n        if (__DEV__) {\n          if (key === \"reobserve\") {\n            invariant.warn(\n              \"[useLazyQuery]: `reobserve` is deprecated and will removed in Apollo Client 4.0. Please change options by rerendering `useLazyQuery` with new options.\"\n            );\n          }\n        }\n\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods as typeof obsQueryFields;\n  }, [forceUpdateState, obsQueryFields]);\n\n  const called = !!execOptionsRef.current;\n  const result = React.useMemo(\n    () => ({\n      ...useQueryResult,\n      ...eagerMethods,\n      called,\n    }),\n    [useQueryResult, eagerMethods, called]\n  );\n\n  const calledDuringRender = useRenderGuard();\n  const warnRef = React.useRef(new Set<keyof LazyQueryHookExecOptions>());\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      if (__DEV__) {\n        if (calledDuringRender()) {\n          invariant.warn(\n            \"[useLazyQuery]: Calling `execute` in render will throw in Apollo Client 4.0. Either switch to `useQuery` to run the query during render or move the `execute` call inside of `useEffect`.\"\n          );\n        }\n\n        for (const name of REMOVED_EXECUTE_OPTIONS) {\n          if (!warnRef.current.has(name)) {\n            warnRemovedOption(\n              executeOptions || {},\n              name,\n              \"useLazyQuery.execute\"\n            );\n            warnRef.current.add(name);\n          }\n        }\n\n        for (const name of DEPRECATED_EXECUTE_OPTIONS) {\n          if (!warnRef.current.has(name)) {\n            warnRemovedOption(\n              executeOptions || {},\n              name,\n              \"useLazyQuery.execute\",\n              \"Please pass the option to the `useLazyQuery` hook instead.\"\n            );\n            warnRef.current.add(name);\n          }\n        }\n      }\n\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = executeQuery(\n        resultData,\n        observable,\n        client,\n        document,\n        { ...options, skip: false },\n        onQueryExecuted\n      ).then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    [\n      calledDuringRender,\n      client,\n      document,\n      eagerMethods,\n      initialFetchPolicy,\n      observable,\n      resultData,\n      onQueryExecuted,\n    ]\n  );\n\n  const executeRef = React.useRef(execute);\n  useIsomorphicLayoutEffect(() => {\n    executeRef.current = execute;\n  });\n\n  const stableExecute = React.useCallback<typeof execute>(\n    (...args) => executeRef.current(...args),\n    []\n  );\n  return [stableExecute, result];\n}\n\nfunction executeQuery<TData, TVariables extends OperationVariables>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  currentQuery: DocumentNode,\n  options: QueryHookOptions<TData, TVariables> & {\n    query?: DocumentNode;\n  },\n  onQueryExecuted: (options: WatchQueryOptions<TVariables, TData>) => void\n) {\n  const query = options.query || currentQuery;\n  const watchQueryOptions = createMakeWatchQueryOptions(\n    client,\n    query,\n    options,\n    false\n  )(observable);\n\n  const concast = observable.reobserveAsConcast(\n    getObsQueryOptions(observable, client, options, watchQueryOptions)\n  );\n  onQueryExecuted(watchQueryOptions);\n\n  return new Promise<\n    Omit<QueryResult<TData, TVariables>, (typeof EAGER_METHODS)[number]>\n  >((resolve) => {\n    let result: ApolloQueryResult<TData>;\n\n    // Subscribe to the concast independently of the ObservableQuery in case\n    // the component gets unmounted before the promise resolves. This prevents\n    // the concast from terminating early and resolving with `undefined` when\n    // there are no more subscribers for the concast.\n    concast.subscribe({\n      next: (value) => {\n        result = value;\n      },\n      error: () => {\n        resolve(\n          toQueryResult(\n            observable.getCurrentResult(),\n            resultData.previousData,\n            observable,\n            client\n          )\n        );\n      },\n      complete: () => {\n        resolve(\n          toQueryResult(\n            observable[\"maskResult\"](result),\n            resultData.previousData,\n            observable,\n            client\n          )\n        );\n      },\n    });\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}