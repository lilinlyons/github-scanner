{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition, preventUnhandledRejection } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nimport { Slot } from \"optimism\";\nimport { muteDeprecations, warnDeprecated, warnRemovedOption } from \"../utilities/deprecation/index.js\";\nvar assign = Object.assign,\n  hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      queryInfo = _a.queryInfo,\n      options = _a.options;\n    var _this = this;\n    var startedInactive = ObservableQuery.inactiveOnCreation.getValue();\n    _this = _super.call(this, function (observer) {\n      _this._getOrCreateQuery();\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = observer._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n      var first = !_this.observers.size;\n      _this.observers.add(observer);\n      // Deliver most recent error or result.\n      var last = _this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(_this.maskResult(last.result));\n      }\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        _this.reobserve().catch(function () {});\n      }\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.dirty = false;\n    _this._getOrCreateQuery = function () {\n      if (startedInactive) {\n        queryManager[\"queries\"].set(_this.queryId, queryInfo);\n        startedInactive = false;\n      }\n      return _this.queryManager.getOrCreateQuery(_this.queryId);\n    };\n    // related classes\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    // active state\n    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    _this.isTornDown = false;\n    _this.subscribeToMore = _this.subscribeToMore.bind(_this);\n    _this.maskResult = _this.maskResult.bind(_this);\n    var _b = queryManager.defaultOptions.watchQuery,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.fetchPolicy,\n      defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n    var _e = options.fetchPolicy,\n      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      _f = options.initialFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy: initialFetchPolicy,\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    // The `query` computed property will always reflect the document transformed\n    // by the last run query. `this.options.query` will always reflect the raw\n    // untransformed query to ensure document transforms with runtime conditionals\n    // are run on the original document.\n    get: function () {\n      return this.lastQuery || this.options.query;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    // Computed shorthand for this.options.variables, preserved for\n    // backwards compatibility.\n    /**\n     * An object containing the variables that were provided for the query.\n     */\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @deprecated `result` will be removed in Apollo Client 4.0.\n   *\n   * **Recommended now**\n   *\n   * If you continue to need this functionality, subscribe to `ObservableQuery`\n   * to get the first value emitted from the observable, then immediately unsubscribe.\n   *\n   * **When upgrading**\n   *\n   * Use RxJS's [`firstResultFrom`](https://rxjs.dev/api/index/function/firstValueFrom) function to mimic this functionality.\n   *\n   * ```ts\n   * const result = await firstValueFrom(from(observableQuery));\n   * ```\n   */\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    if (globalThis.__DEV__ !== false) {\n      warnDeprecated(\"observableQuery.result\", function () {\n        globalThis.__DEV__ !== false && invariant.warn(23);\n      });\n    }\n    return new Promise(function (resolve, reject) {\n      // TODO: this code doesnâ€™t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      var observer = {\n        next: function (result) {\n          resolve(result);\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  /** @internal */\n  ObservableQuery.prototype.resetDiff = function () {\n    this.queryInfo.resetDiff();\n  };\n  ObservableQuery.prototype.getCurrentFullResult = function (saveAsLastResult) {\n    var _this = this;\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    // Use the last result as long as the variables match this.variables.\n    var lastResult = muteDeprecations(\"getLastResult\", function () {\n      return _this.getLastResult(true);\n    });\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n    var _a = this.options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n    if (\n    // These fetch policies should never deliver data from the cache, unless\n    // redelivering a previously delivered result.\n    skipCacheDataFor(fetchPolicy) ||\n    // If this.options.query has @client(always: true) fields, we cannot\n    // trust diff.result, since it was read from the cache without running\n    // local resolvers (and it's too late to run resolvers now, since we must\n    // return a result synchronously).\n    this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n      // Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      var diff = this.queryInfo.getDiff();\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n      // We need to check for both both `error` and `errors` field because there\n      // are cases where sometimes `error` is set, but not `errors` and\n      // vice-versa. This will be updated in the next major version when\n      // `errors` is deprecated in favor of `error`.\n      if (result.networkStatus === NetworkStatus.ready && (result.error || result.errors)) {\n        result.networkStatus = NetworkStatus.error;\n      }\n      if (globalThis.__DEV__ !== false && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    return this.maskResult(this.getCurrentFullResult(saveAsLastResult));\n  };\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    if (!this.last) {\n      return true;\n    }\n    var documentInfo = this.queryManager.getDocumentInfo(this.query);\n    var dataMasking = this.queryManager.dataMasking;\n    var query = dataMasking ? documentInfo.nonReactiveQuery : this.query;\n    var resultIsDifferent = dataMasking || documentInfo.hasNonreactiveDirective ? !equalByQuery(query, this.last.result, newResult, this.variables) : !equal(this.last.result, newResult);\n    return resultIsDifferent || variables && !equal(this.last.variables, variables);\n  };\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n  /**\n   * @deprecated `getLastResult` will be removed in Apollo Client 4.0. Please\n   * discontinue using this method.\n   */\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    if (globalThis.__DEV__ !== false) {\n      warnDeprecated(\"getLastResult\", function () {\n        globalThis.__DEV__ !== false && invariant.warn(24);\n      });\n    }\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n  /**\n   * @deprecated `getLastError` will be removed in Apollo Client 4.0. Please\n   * discontinue using this method.\n   */\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    if (globalThis.__DEV__ !== false) {\n      warnDeprecated(\"getLastError\", function () {\n        globalThis.__DEV__ !== false && invariant.warn(25);\n      });\n    }\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n  /**\n   * @deprecated `resetLastResults` will be removed in Apollo Client 4.0. Please\n   * discontinue using this method.\n   */\n  ObservableQuery.prototype.resetLastResults = function () {\n    if (globalThis.__DEV__ !== false) {\n      warnDeprecated(\"resetLastResults\", function () {\n        globalThis.__DEV__ !== false && invariant.warn(26);\n      });\n    }\n    delete this.last;\n    this.isTornDown = false;\n  };\n  /**\n   * @deprecated `resetQueryStoreErrors` will be removed in Apollo Client 4.0.\n   * Please discontinue using this method.\n   */\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    if (globalThis.__DEV__ !== false) {\n      globalThis.__DEV__ !== false && invariant.warn(27);\n    }\n    this.queryManager.resetErrors(this.queryId);\n  };\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n    var reobserveOptions = {\n      // Always disable polling for refetches.\n      pollInterval: 0\n    };\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n    if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        globalThis.__DEV__ !== false && invariant.warn(28, variables, ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef);\n      }\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  /**\n   * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n   */\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.options.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\"\n    });\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n    var qid = this.queryManager.generateQueryId();\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery = fetchMoreOptions.query ? this.transformDocument(this.options.query) : combinedOptions.query;\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n    var updatedQuerySet = new Set();\n    var updateQuery = fetchMoreOptions === null || fetchMoreOptions === void 0 ? void 0 : fetchMoreOptions.updateQuery;\n    var isCached = this.options.fetchPolicy !== \"no-cache\";\n    if (!isCached) {\n      invariant(updateQuery, 29);\n    }\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n      if (isCached) {\n        // Performing this cache update inside a cache.batch transaction ensures\n        // any affected cache.watch watchers are notified at most once about any\n        // updates. Most watchers will be using the QueryInfo class, which\n        // responds to notifications by calling reobserveCacheFirst to deliver\n        // fetchMore cache results back to this ObservableQuery.\n        _this.queryManager.cache.batch({\n          update: function (cache) {\n            var updateQuery = fetchMoreOptions.updateQuery;\n            if (updateQuery) {\n              cache.updateQuery({\n                query: _this.query,\n                variables: _this.variables,\n                returnPartialData: true,\n                optimistic: false\n              }, function (previous) {\n                return updateQuery(previous, {\n                  fetchMoreResult: fetchMoreResult.data,\n                  variables: combinedOptions.variables\n                });\n              });\n            } else {\n              // If we're using a field policy instead of updateQuery, the only\n              // thing we need to do is write the new data to the cache using\n              // combinedOptions.variables (instead of this.variables, which is\n              // what this.updateQuery uses, because it works by abusing the\n              // original field value, keyed by the original variables).\n              cache.writeQuery({\n                query: combinedOptions.query,\n                variables: combinedOptions.variables,\n                data: fetchMoreResult.data\n              });\n            }\n          },\n          onWatchUpdated: function (watch) {\n            // Record the DocumentNode associated with any watched query whose\n            // data were updated by the cache writes above.\n            updatedQuerySet.add(watch.query);\n          }\n        });\n      } else {\n        // There is a possibility `lastResult` may not be set when\n        // `fetchMore` is called which would cause this to crash. This should\n        // only happen if we haven't previously reported a result. We don't\n        // quite know what the right behavior should be here since this block\n        // of code runs after the fetch result has executed on the network.\n        // We plan to let it crash in the meantime.\n        //\n        // If we get bug reports due to the `data` property access on\n        // undefined, this should give us a real-world scenario that we can\n        // use to test against and determine the right behavior. If we do end\n        // up changing this behavior, this may require, for example, an\n        // adjustment to the types on `updateQuery` since that function\n        // expects that the first argument always contains previous result\n        // data, but not `undefined`.\n        var lastResult = _this.getLast(\"result\");\n        var data = updateQuery(lastResult.data, {\n          fetchMoreResult: fetchMoreResult.data,\n          variables: combinedOptions.variables\n        });\n        _this.reportResult(__assign(__assign({}, lastResult), {\n          networkStatus: originalNetworkStatus,\n          loading: isNetworkRequestInFlight(originalNetworkStatus),\n          data: data\n        }), _this.variables);\n      }\n      return _this.maskResult(fetchMoreResult);\n    }).finally(function () {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (isCached && !updatedQuerySet.has(_this.query)) {\n        _this.reobserveCacheFirst();\n      }\n    });\n  };\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  /**\n   * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n   *\n   * This function returns _another_ function that you can call to terminate the subscription.\n   */\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, updateOptions) {\n            return updateQuery(previous, __assign({\n              subscriptionData: subscriptionData\n            }, updateOptions));\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        globalThis.__DEV__ !== false && invariant.error(30, err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  /**\n   * @deprecated `setOptions` will be removed in Apollo Client 4.0. Please use\n   * `observableQuery.reobserve(newOptions)` instead.\n   */\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    if (globalThis.__DEV__ !== false) {\n      warnRemovedOption(newOptions, \"canonizeResults\", \"setOptions\");\n      warnDeprecated(\"setOptions\", function () {\n        globalThis.__DEV__ !== false && invariant.warn(31);\n      });\n    }\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n    var mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  };\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  ObservableQuery.prototype.setVariables = function (variables) {\n    var _this = this;\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ? muteDeprecations(\"observableQuery.result\", function () {\n        return _this.result();\n      }) : Promise.resolve();\n    }\n    this.options.variables = variables;\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  /**\n   * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n   *\n   * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n   */\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var _a = queryManager.cache.diff({\n        query: this.options.query,\n        variables: this.variables,\n        returnPartialData: true,\n        optimistic: false\n      }),\n      result = _a.result,\n      complete = _a.complete;\n    var newResult = mapFn(result, {\n      variables: this.variables,\n      complete: !!complete,\n      previousData: result\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  /**\n   * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n   */\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  /**\n   * A function that instructs the query to stop polling after a previous call to `startPolling`.\n   */\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason,\n  // It's possible to use this method to apply options.nextFetchPolicy to\n  // options.fetchPolicy even if options !== this.options, though that happens\n  // most often when the options are temporary, used for only one request and\n  // then thrown away, so nextFetchPolicy may not end up mattering.\n  options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.initialFetchPolicy,\n        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n    return options.fetchPolicy;\n  };\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    var queryInfo = this._getOrCreateQuery();\n    queryInfo.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](queryInfo, options, newNetworkStatus, query);\n  };\n  // Turns polling on or off based on this.options.pollInterval.\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval || !this.hasObservers()) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    invariant(pollInterval, 32);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function () {\n      var _a, _b;\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus) && !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n          _this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ? \"no-cache\" : \"network-only\"\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n    var poll = function () {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    var _this = this;\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    var error = muteDeprecations(\"getLastError\", function () {\n      return _this.getLastError();\n    });\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return this.last = __assign({\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    }, error ? {\n      error: error\n    } : null);\n  };\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n    this.isTornDown = false;\n    var useDisposableConcast =\n    // Refetching uses a disposable Concast to allow refetches using different\n    // options/variables, without permanently altering the options of the\n    // original ObservableQuery.\n    newNetworkStatus === NetworkStatus.refetch ||\n    // The fetchMore method does not actually call the reobserve method, but,\n    // if it did, it would definitely use a disposable Concast.\n    newNetworkStatus === NetworkStatus.fetchMore ||\n    // Polling uses a disposable Concast so the polling options (which force\n    // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n    newNetworkStatus === NetworkStatus.poll;\n    // Save the old variables, since Object.assign may modify them below.\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ?\n    // Disposable Concast fetches receive a shallow copy of this.options\n    // (merged with newOptions), leaving this.options unmodified.\n    mergedOptions : assign(this.options, mergedOptions);\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    var query = this.transformDocument(options.query);\n    this.lastQuery = query;\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) &&\n      // Don't mess with the fetchPolicy if it's currently \"standby\".\n      options.fetchPolicy !== \"standby\" && (\n      // If we're changing the fetchPolicy anyway, don't try to change it here\n      // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n      options.fetchPolicy === oldFetchPolicy ||\n      // A `nextFetchPolicy` function has even higher priority, though,\n      // so in that case `applyNextFetchPolicy` must be called.\n      typeof options.nextFetchPolicy === \"function\")) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n    var finishWaitingForOwnResult = function () {\n      if (_this.concast === concast) {\n        _this.waitForOwnResult = false;\n      }\n    };\n    var variables = options.variables && __assign({}, options.variables);\n    var _a = this.fetch(options, newNetworkStatus, query),\n      concast = _a.concast,\n      fromLink = _a.fromLink;\n    var observer = {\n      next: function (result) {\n        if (equal(_this.variables, variables)) {\n          finishWaitingForOwnResult();\n          _this.reportResult(result, variables);\n        }\n      },\n      error: function (error) {\n        if (equal(_this.variables, variables)) {\n          // Coming from `getResultsFromLink`, `error` here should always be an `ApolloError`.\n          // However, calling `concast.cancel` can inject another type of error, so we have to\n          // wrap it again here.\n          if (!isApolloError(error)) {\n            error = new ApolloError({\n              networkError: error\n            });\n          }\n          finishWaitingForOwnResult();\n          _this.reportError(error, variables);\n        }\n      }\n    };\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n      this.concast = concast;\n      this.observer = observer;\n    }\n    concast.addObserver(observer);\n    return concast;\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return preventUnhandledRejection(this.reobserveAsConcast(newOptions, newNetworkStatus).promise.then(this.maskResult));\n  };\n  ObservableQuery.prototype.resubscribeAfterError = function () {\n    var _this = this;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n    var last = this.last;\n    muteDeprecations(\"resetLastResults\", function () {\n      return _this.resetLastResults();\n    });\n    var subscription = this.subscribe.apply(this, args);\n    this.last = last;\n    return subscription;\n  };\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(\n    // Passing false is important so that this.getCurrentResult doesn't\n    // save the fetchMore result as this.lastResult, causing it to be\n    // ignored due to the this.isDifferentFromLastResult check in\n    // this.reportResult.\n    this.getCurrentFullResult(false), this.variables);\n  };\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var _this = this;\n    var lastError = muteDeprecations(\"getLastError\", function () {\n      return _this.getLastError();\n    });\n    var isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", this.maskResult(result));\n    }\n  };\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var _this = this;\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    var errorResult = __assign(__assign({}, muteDeprecations(\"getLastResult\", function () {\n      return _this.getLastResult();\n    })), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, \"error\", this.last.error = error);\n  };\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n  ObservableQuery.prototype.transformDocument = function (document) {\n    return this.queryManager.transform(document);\n  };\n  ObservableQuery.prototype.maskResult = function (result) {\n    return result && \"data\" in result ? __assign(__assign({}, result), {\n      data: this.queryManager.maskOperation({\n        document: this.query,\n        data: result.data,\n        fetchPolicy: this.options.fetchPolicy,\n        id: this.queryId\n      })\n    }) : result;\n  };\n  /** @internal */\n  ObservableQuery.prototype.resetNotifications = function () {\n    this.cancelNotifyTimeout();\n    this.dirty = false;\n  };\n  ObservableQuery.prototype.cancelNotifyTimeout = function () {\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n  };\n  /** @internal */\n  ObservableQuery.prototype.scheduleNotify = function () {\n    var _this = this;\n    if (this.dirty) return;\n    this.dirty = true;\n    if (!this.notifyTimeout) {\n      this.notifyTimeout = setTimeout(function () {\n        return _this.notify();\n      }, 0);\n    }\n  };\n  /** @internal */\n  ObservableQuery.prototype.notify = function () {\n    this.cancelNotifyTimeout();\n    if (this.dirty) {\n      if (this.options.fetchPolicy == \"cache-only\" || this.options.fetchPolicy == \"cache-and-network\" || !isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n        var diff = this.queryInfo.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          // If this diff came from an optimistic transaction, deliver the\n          // current cache data to the ObservableQuery, but don't perform a\n          // reobservation, since oq.reobserveCacheFirst might make a network\n          // request, and we never want to trigger network requests in the\n          // middle of optimistic updates.\n          this.observe();\n        } else {\n          // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n          // using a temporary fetch policy of \"cache-first\", so complete cache\n          // results have a chance to be delivered without triggering additional\n          // network requests, even when options.fetchPolicy is \"network-only\"\n          // or \"cache-and-network\". All other fetch policies are preserved by\n          // this method, and are handled by calling oq.reobserve(). If this\n          // reobservation is spurious, isDifferentFromLastResult still has a\n          // chance to catch it before delivery to ObservableQuery subscribers.\n          this.reobserveCacheFirst();\n        }\n      }\n    }\n    this.dirty = false;\n  };\n  // Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n  // delivery of any new data from the cache, possibly falling back to the network\n  // if any cache data are missing. This allows _complete_ cache results to be\n  // delivered without also kicking off unnecessary network requests when\n  // this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n  // this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n  // \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\n  ObservableQuery.prototype.reobserveCacheFirst = function () {\n    var _a = this.options,\n      fetchPolicy = _a.fetchPolicy,\n      nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n      return this.reobserve({\n        fetchPolicy: \"cache-first\",\n        // Use a temporary nextFetchPolicy function that replaces itself with the\n        // previous nextFetchPolicy value and returns the original fetchPolicy.\n        nextFetchPolicy: function (currentFetchPolicy, context) {\n          // Replace this nextFetchPolicy function in the options object with the\n          // original this.options.nextFetchPolicy value.\n          this.nextFetchPolicy = nextFetchPolicy;\n          // If the original nextFetchPolicy value was a function, give it a\n          // chance to decide what happens here.\n          if (typeof this.nextFetchPolicy === \"function\") {\n            return this.nextFetchPolicy(currentFetchPolicy, context);\n          }\n          // Otherwise go back to the original this.options.fetchPolicy.\n          return fetchPolicy;\n        }\n      });\n    }\n    return this.reobserve();\n  };\n  /**\n   * @internal\n   * A slot used by the `useQuery` hook to indicate that `client.watchQuery`\n   * should not register the query immediately, but instead wait for the query to\n   * be started registered with the `QueryManager` when `useSyncExternalStore`\n   * actively subscribes to it.\n   */\n  ObservableQuery.inactiveOnCreation = new Slot();\n  return ObservableQuery;\n}(Observable);\nexport { ObservableQuery };\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  globalThis.__DEV__ !== false && invariant.error(33, error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n  if (globalThis.__DEV__ !== false && missing) {\n    globalThis.__DEV__ !== false && invariant.debug(34, missing);\n  }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}","map":{"version":3,"names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","fixObservableSubclass","getQueryDefinition","preventUnhandledRejection","ApolloError","isApolloError","equalByQuery","Slot","muteDeprecations","warnDeprecated","warnRemovedOption","assign","Object","hasOwnProperty","ObservableQuery","_super","__extends","_a","queryManager","queryInfo","options","_this","startedInactive","inactiveOnCreation","getValue","call","observer","_getOrCreateQuery","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","observers","size","add","last","result","next","maskResult","reobserve","catch","delete","tearDownQuery","Set","subscriptions","dirty","set","queryId","getOrCreateQuery","waitForOwnResult","skipCacheDataFor","fetchPolicy","isTornDown","subscribeToMore","bind","_b","defaultOptions","watchQuery","_c","_d","defaultFetchPolicy","_e","_f","initialFetchPolicy","__assign","generateQueryId","opDef","query","queryName","name","value","defineProperty","prototype","get","lastQuery","variables","globalThis","__DEV__","warn","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","resetDiff","getCurrentFullResult","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","getDocumentInfo","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","errors","partialRefetch","logMissingFieldErrors","missing","updateLastResult","getCurrentResult","isDifferentFromLastResult","newResult","documentInfo","dataMasking","nonReactiveQuery","resultIsDifferent","hasNonreactiveDirective","getLast","key","variablesMustMatch","getLastError","resetLastResults","resetQueryStoreErrors","resetErrors","refetch","reobserveOptions","pollInterval","queryDef","vars","variableDefinitions","some","v","variable","fetchMore","fetchMoreOptions","combinedOptions","transformDocument","qid","originalNetworkStatus","notifyOnNetworkStatusChange","observe","updatedQuerySet","updateQuery","isCached","then","fetchMoreResult","cache","batch","previous","writeQuery","onWatchUpdated","watch","reportResult","finally","has","reobserveCacheFirst","startGraphQLSubscription","document","context","subscriptionData","updateOptions","err","onError","setOptions","newOptions","silentSetOptions","setVariables","mapFn","optimistic","startPolling","updatePolling","stopPolling","applyNextFetchPolicy","reason","nextFetchPolicy","observable","fetch","newNetworkStatus","setObservableQuery","ssrMode","pollingInfo","hasObservers","clearTimeout","timeout","interval","info","maybeFetch","skipPollAttempt","poll","assumeImmutableResults","reobserveAsConcast","useDisposableConcast","oldVariables","oldFetchPolicy","mergedOptions","finishWaitingForOwnResult","concast","fromLink","networkError","reportError","removeObserver","addObserver","promise","resubscribeAfterError","args","_i","arguments","length","apply","lastError","isDifferent","errorResult","graphQLErrors","forEach","sub","clear","stopQuery","transform","maskOperation","id","resetNotifications","cancelNotifyTimeout","notifyTimeout","scheduleNotify","notify","fromOptimisticTransaction","currentFetchPolicy","message","stack","debug"],"sources":["/Users/lililyons/WebstormProjects/github-scanner/github-scanner-client/node_modules/@apollo/src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from \"../utilities/globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  Concast,\n  Observer,\n  ObservableSubscription,\n} from \"../utilities/index.js\";\nimport {\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  iterateObserversSafely,\n  fixObservableSubclass,\n  getQueryDefinition,\n  preventUnhandledRejection,\n} from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type {\n  ApolloQueryResult,\n  InteropApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n  UpdateQueryMapFn,\n  UpdateQueryOptions,\n} from \"./watchQueryOptions.js\";\nimport type { QueryInfo } from \"./QueryInfo.js\";\nimport type { MissingFieldError } from \"../cache/index.js\";\nimport type { MissingTree } from \"../cache/core/types/common.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nimport type { TODO } from \"../utilities/types/TODO.js\";\nimport type { MaybeMasked, Unmasked } from \"../masking/index.js\";\nimport { Slot } from \"optimism\";\nimport {\n  muteDeprecations,\n  warnDeprecated,\n  warnRemovedOption,\n} from \"../utilities/deprecation/index.js\";\n\nconst { assign, hasOwnProperty } = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables,\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    }\n  ) => TData;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n> extends Observable<ApolloQueryResult<MaybeMasked<TData>>> {\n  /**\n   * @internal\n   * A slot used by the `useQuery` hook to indicate that `client.watchQuery`\n   * should not register the query immediately, but instead wait for the query to\n   * be started registered with the `QueryManager` when `useSyncExternalStore`\n   * actively subscribes to it.\n   */\n  private static inactiveOnCreation = new Slot<boolean>();\n\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  /**\n   * @deprecated `queryId` will be removed in Apollo Client 4.0. This value is\n   * safe to use in Apollo Client 3.x.\n   *\n   * **Recommended now**\n   *\n   * `ObservableQuery` does not have a unique identifier in 4.0. If you rely on\n   * this value, please try to migrate away from it.\n   */\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery || this.options.query;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  /**\n   * An object containing the variables that were provided for the query.\n   */\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<\n    Observer<ApolloQueryResult<MaybeMasked<TData>>>\n  >();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n  private lastQuery?: DocumentNode;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  private _getOrCreateQuery: () => QueryInfo;\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    let startedInactive = ObservableQuery.inactiveOnCreation.getValue();\n    super((observer: Observer<ApolloQueryResult<MaybeMasked<TData>>>) => {\n      this._getOrCreateQuery();\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(this.maskResult(last.result));\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    this._getOrCreateQuery = () => {\n      if (startedInactive) {\n        queryManager[\"queries\"].set(this.queryId, queryInfo);\n        startedInactive = false;\n      }\n      return this.queryManager.getOrCreateQuery(this.queryId);\n    };\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    this.subscribeToMore = this.subscribeToMore.bind(this);\n    this.maskResult = this.maskResult.bind(this);\n\n    const {\n      watchQuery: { fetchPolicy: defaultFetchPolicy = \"cache-first\" } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = fetchPolicy === \"standby\" ? defaultFetchPolicy : (\n        fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  /**\n   * @deprecated `result` will be removed in Apollo Client 4.0.\n   *\n   * **Recommended now**\n   *\n   * If you continue to need this functionality, subscribe to `ObservableQuery`\n   * to get the first value emitted from the observable, then immediately unsubscribe.\n   *\n   * **When upgrading**\n   *\n   * Use RxJS's [`firstResultFrom`](https://rxjs.dev/api/index/function/firstValueFrom) function to mimic this functionality.\n   *\n   * ```ts\n   * const result = await firstValueFrom(from(observableQuery));\n   * ```\n   */\n  public result(): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    if (__DEV__) {\n      warnDeprecated(\"observableQuery.result\", () => {\n        invariant.warn(\n          \"[observableQuery.result]: `result` is deprecated and will be removed with Apollo Client 4.0.\"\n        );\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesnâ€™t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<MaybeMasked<TData>>> = {\n        next: (result) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  /** @internal */\n  public resetDiff() {\n    this.queryInfo.resetDiff();\n  }\n\n  private getCurrentFullResult(\n    saveAsLastResult = true\n  ): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = muteDeprecations(\"getLastResult\", () =>\n      this.getLastResult(true)\n    );\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.getDocumentInfo(this.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      // We need to check for both both `error` and `errors` field because there\n      // are cases where sometimes `error` is set, but not `errors` and\n      // vice-versa. This will be updated in the next major version when\n      // `errors` is deprecated in favor of `error`.\n      if (\n        result.networkStatus === NetworkStatus.ready &&\n        (result.error || result.errors)\n      ) {\n        result.networkStatus = NetworkStatus.error;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  public getCurrentResult(\n    saveAsLastResult = true\n  ): ApolloQueryResult<MaybeMasked<TData>> {\n    return this.maskResult(this.getCurrentFullResult(saveAsLastResult));\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    if (!this.last) {\n      return true;\n    }\n\n    const documentInfo = this.queryManager.getDocumentInfo(this.query);\n    const dataMasking = this.queryManager.dataMasking;\n    const query = dataMasking ? documentInfo.nonReactiveQuery : this.query;\n\n    const resultIsDifferent =\n      dataMasking || documentInfo.hasNonreactiveDirective ?\n        !equalByQuery(query, this.last.result, newResult, this.variables)\n      : !equal(this.last.result, newResult);\n\n    return (\n      resultIsDifferent || (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  /**\n   * @deprecated `getLastResult` will be removed in Apollo Client 4.0. Please\n   * discontinue using this method.\n   */\n  public getLastResult(\n    variablesMustMatch?: boolean\n  ): ApolloQueryResult<TData> | undefined {\n    if (__DEV__) {\n      warnDeprecated(\"getLastResult\", () => {\n        invariant.warn(\n          \"[ObservableQuery]: `getLastResult` is deprecated and will be removed in Apollo Client 4.0. Please discontinue using this method.\"\n        );\n      });\n    }\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  /**\n   * @deprecated `getLastError` will be removed in Apollo Client 4.0. Please\n   * discontinue using this method.\n   */\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    if (__DEV__) {\n      warnDeprecated(\"getLastError\", () => {\n        invariant.warn(\n          \"[ObservableQuery]: `getLastResult` is deprecated and will be removed in Apollo Client 4.0. Please discontinue using this method.\"\n        );\n      });\n    }\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  /**\n   * @deprecated `resetLastResults` will be removed in Apollo Client 4.0. Please\n   * discontinue using this method.\n   */\n  public resetLastResults(): void {\n    if (__DEV__) {\n      warnDeprecated(\"resetLastResults\", () => {\n        invariant.warn(\n          \"[ObservableQuery]: `getLastResult` is deprecated and will be removed in Apollo Client 4.0. Please discontinue using this method.\"\n        );\n      });\n    }\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  /**\n   * @deprecated `resetQueryStoreErrors` will be removed in Apollo Client 4.0.\n   * Please discontinue using this method.\n   */\n  public resetQueryStoreErrors() {\n    if (__DEV__) {\n      invariant.warn(\n        \"[observableQuery.resetQueryStoreErrors]: `resetQueryStoreErrors` is deprecated and will be removed with Apollo Client 4.0. Please discontinue using this method.\"\n      );\n    }\n\n    this.queryManager.resetErrors(this.queryId);\n  }\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(\n    variables?: Partial<TVariables>\n  ): Promise<InteropApolloQueryResult<MaybeMasked<TData>>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some((v) => v.variable.name.value === \"variables\")) {\n        invariant.warn(\n          `Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  /**\n   * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n   */\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(\n    fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n      updateQuery?: (\n        previousQueryResult: Unmasked<TData>,\n        options: {\n          fetchMoreResult: Unmasked<TFetchData>;\n          variables: TFetchVars;\n        }\n      ) => Unmasked<TData>;\n    }\n  ): Promise<InteropApolloQueryResult<MaybeMasked<TFetchData>>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : (\n        {\n          ...this.options,\n          query: this.options.query,\n          ...fetchMoreOptions,\n          variables: {\n            ...this.options.variables,\n            ...fetchMoreOptions.variables,\n          },\n        }\n      )),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    const qid = this.queryManager.generateQueryId();\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery =\n      fetchMoreOptions.query ?\n        this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    const updateQuery = fetchMoreOptions?.updateQuery;\n    const isCached = this.options.fetchPolicy !== \"no-cache\";\n\n    if (!isCached) {\n      invariant(\n        updateQuery,\n        \"You must provide an `updateQuery` function when using `fetchMore` with a `no-cache` fetch policy.\"\n      );\n    }\n\n    return this.queryManager\n      .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n      .then((fetchMoreResult) => {\n        this.queryManager.removeQuery(qid);\n\n        if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n          queryInfo.networkStatus = originalNetworkStatus;\n        }\n\n        if (isCached) {\n          // Performing this cache update inside a cache.batch transaction ensures\n          // any affected cache.watch watchers are notified at most once about any\n          // updates. Most watchers will be using the QueryInfo class, which\n          // responds to notifications by calling reobserveCacheFirst to deliver\n          // fetchMore cache results back to this ObservableQuery.\n          this.queryManager.cache.batch({\n            update: (cache) => {\n              const { updateQuery } = fetchMoreOptions;\n              if (updateQuery) {\n                cache.updateQuery(\n                  {\n                    query: this.query,\n                    variables: this.variables,\n                    returnPartialData: true,\n                    optimistic: false,\n                  },\n                  (previous) =>\n                    updateQuery(previous! as any, {\n                      fetchMoreResult: fetchMoreResult.data as any,\n                      variables: combinedOptions.variables as TFetchVars,\n                    })\n                );\n              } else {\n                // If we're using a field policy instead of updateQuery, the only\n                // thing we need to do is write the new data to the cache using\n                // combinedOptions.variables (instead of this.variables, which is\n                // what this.updateQuery uses, because it works by abusing the\n                // original field value, keyed by the original variables).\n                cache.writeQuery({\n                  query: combinedOptions.query,\n                  variables: combinedOptions.variables,\n                  data: fetchMoreResult.data as Unmasked<TFetchData>,\n                });\n              }\n            },\n\n            onWatchUpdated: (watch) => {\n              // Record the DocumentNode associated with any watched query whose\n              // data were updated by the cache writes above.\n              updatedQuerySet.add(watch.query);\n            },\n          });\n        } else {\n          // There is a possibility `lastResult` may not be set when\n          // `fetchMore` is called which would cause this to crash. This should\n          // only happen if we haven't previously reported a result. We don't\n          // quite know what the right behavior should be here since this block\n          // of code runs after the fetch result has executed on the network.\n          // We plan to let it crash in the meantime.\n          //\n          // If we get bug reports due to the `data` property access on\n          // undefined, this should give us a real-world scenario that we can\n          // use to test against and determine the right behavior. If we do end\n          // up changing this behavior, this may require, for example, an\n          // adjustment to the types on `updateQuery` since that function\n          // expects that the first argument always contains previous result\n          // data, but not `undefined`.\n          const lastResult = this.getLast(\"result\")!;\n          const data = updateQuery!(lastResult.data as Unmasked<TData>, {\n            fetchMoreResult: fetchMoreResult.data as Unmasked<TFetchData>,\n            variables: combinedOptions.variables as TFetchVars,\n          });\n\n          this.reportResult(\n            {\n              ...lastResult,\n              networkStatus: originalNetworkStatus!,\n              loading: isNetworkRequestInFlight(originalNetworkStatus),\n              data: data as TData,\n            },\n            this.variables\n          );\n        }\n\n        return this.maskResult(fetchMoreResult);\n      })\n      .finally(() => {\n        // In case the cache writes above did not generate a broadcast\n        // notification (which would have been intercepted by onWatchUpdated),\n        // likely because the written data were the same as what was already in\n        // the cache, we still want fetchMore to deliver its final loading:false\n        // result with the unchanged data.\n        if (isCached && !updatedQuerySet.has(this.query)) {\n          this.reobserveCacheFirst();\n        }\n      });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  /**\n   * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n   *\n   * This function returns _another_ function that you can call to terminate the subscription.\n   */\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables,\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData,\n      TVariables\n    >\n  ): () => void {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: Unmasked<TSubscriptionData> }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery((previous, updateOptions) =>\n              updateQuery(previous, {\n                subscriptionData,\n                ...updateOptions,\n              })\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error(\"Unhandled GraphQL subscription error\", err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  /**\n   * @deprecated `setOptions` will be removed in Apollo Client 4.0. Please use\n   * `observableQuery.reobserve(newOptions)` instead.\n   */\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ): Promise<InteropApolloQueryResult<MaybeMasked<TData>>> {\n    if (__DEV__) {\n      warnRemovedOption(newOptions, \"canonizeResults\", \"setOptions\");\n      warnDeprecated(\"setOptions\", () => {\n        invariant.warn(\n          \"[observableQuery.setOptions] `setOptions` is deprecated and will be removed in Apollo Client 4.0. Please use `observableQuery.reobserve(newOptions)` instead.\"\n        );\n      });\n    }\n\n    return this.reobserve(newOptions);\n  }\n\n  public silentSetOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ) {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables\n  ): Promise<InteropApolloQueryResult<MaybeMasked<TData>> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ?\n          muteDeprecations(\"observableQuery.result\", () => this.result())\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve(\n      {\n        // Reset options.fetchPolicy to its original value.\n        fetchPolicy: this.options.initialFetchPolicy,\n        variables,\n      },\n      NetworkStatus.setVariables\n    );\n  }\n\n  /**\n   * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n   *\n   * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n   */\n  public updateQuery(mapFn: UpdateQueryMapFn<TData, TVariables>): void {\n    const { queryManager } = this;\n    const { result, complete } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(\n      result! as Unmasked<TData>,\n      {\n        variables: this.variables,\n        complete: !!complete,\n        previousData: result,\n      } as UpdateQueryOptions<TData, TVariables>\n    );\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  /**\n   * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n   */\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  /**\n   * A function that instructs the query to stop polling after a previous call to `startPolling`.\n   */\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>\n  ) {\n    if (options.nextFetchPolicy) {\n      const { fetchPolicy = \"cache-first\", initialFetchPolicy = fetchPolicy } =\n        options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n    query?: DocumentNode\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    const queryInfo = this._getOrCreateQuery();\n    queryInfo.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](\n      queryInfo,\n      options,\n      newNetworkStatus,\n      query\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: { pollInterval },\n    } = this;\n\n    if (!pollInterval || !this.hasObservers()) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      \"Attempted to start a polling query without a polling interval.\"\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (\n          !isNetworkRequestInFlight(this.queryInfo.networkStatus) &&\n          !this.options.skipPollAttempt?.()\n        ) {\n          this.reobserve(\n            {\n              // Most fetchPolicy options don't make sense to use in a polling context, as\n              // users wouldn't want to be polling the cache directly. However, network-only and\n              // no-cache are both useful for when the user wants to control whether or not the\n              // polled results are written to the cache.\n              fetchPolicy:\n                this.options.initialFetchPolicy === \"no-cache\" ?\n                  \"no-cache\"\n                : \"network-only\",\n            },\n            NetworkStatus.poll\n          ).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables\n  ) {\n    let error: ApolloError | undefined = muteDeprecations(\"getLastError\", () =>\n      this.getLastError()\n    );\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return (this.last = {\n      result:\n        this.queryManager.assumeImmutableResults ?\n          newResult\n        : cloneDeep(newResult),\n      variables,\n      ...(error ? { error } : null),\n    });\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options =\n      useDisposableConcast ?\n        // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        (options.fetchPolicy === oldFetchPolicy ||\n          // A `nextFetchPolicy` function has even higher priority, though,\n          // so in that case `applyNextFetchPolicy` must be called.\n          typeof options.nextFetchPolicy === \"function\")\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult &&= skipCacheDataFor(options.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n\n    const variables = options.variables && { ...options.variables };\n    const { concast, fromLink } = this.fetch(options, newNetworkStatus, query);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: (result) => {\n        if (equal(this.variables, variables)) {\n          finishWaitingForOwnResult();\n          this.reportResult(result, variables);\n        }\n      },\n      error: (error) => {\n        if (equal(this.variables, variables)) {\n          // Coming from `getResultsFromLink`, `error` here should always be an `ApolloError`.\n          // However, calling `concast.cancel` can inject another type of error, so we have to\n          // wrap it again here.\n          if (!isApolloError(error)) {\n            error = new ApolloError({ networkError: error });\n          }\n          finishWaitingForOwnResult();\n          this.reportError(error, variables);\n        }\n      },\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Promise<InteropApolloQueryResult<MaybeMasked<TData>>> {\n    return preventUnhandledRejection(\n      this.reobserveAsConcast(newOptions, newNetworkStatus).promise.then(\n        this.maskResult as TODO\n      )\n    );\n  }\n\n  public resubscribeAfterError(\n    onNext: (value: ApolloQueryResult<MaybeMasked<TData>>) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(\n    observer: Observer<ApolloQueryResult<TData>>\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(...args: [any, any?, any?]) {\n    // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n    const last = this.last;\n    muteDeprecations(\"resetLastResults\", () => this.resetLastResults());\n\n    const subscription = this.subscribe(...args);\n    this.last = last;\n\n    return subscription;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentFullResult(false),\n      this.variables\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined\n  ) {\n    const lastError = muteDeprecations(\"getLastError\", () =>\n      this.getLastError()\n    );\n    const isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", this.maskResult(result));\n    }\n  }\n\n  private reportError(error: ApolloError, variables: TVariables | undefined) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...muteDeprecations(\"getLastResult\", () => this.getLastResult()),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, \"error\", (this.last!.error = error));\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n\n  private maskResult<T = TData>(\n    result: ApolloQueryResult<T>\n  ): ApolloQueryResult<MaybeMasked<T>> {\n    return result && \"data\" in result ?\n        {\n          ...result,\n          data: this.queryManager.maskOperation({\n            document: this.query,\n            data: result.data,\n            fetchPolicy: this.options.fetchPolicy,\n            id: this.queryId,\n          }),\n        }\n      : result;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  /** @internal */\n  protected resetNotifications() {\n    this.cancelNotifyTimeout();\n    this.dirty = false;\n  }\n\n  private cancelNotifyTimeout() {\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n  }\n\n  /** @internal */\n  protected scheduleNotify() {\n    if (this.dirty) return;\n    this.dirty = true;\n    if (!this.notifyTimeout) {\n      this.notifyTimeout = setTimeout(() => this.notify(), 0);\n    }\n  }\n\n  /** @internal */\n  protected notify() {\n    this.cancelNotifyTimeout();\n\n    if (this.dirty) {\n      if (\n        this.options.fetchPolicy == \"cache-only\" ||\n        this.options.fetchPolicy == \"cache-and-network\" ||\n        !isNetworkRequestInFlight(this.queryInfo.networkStatus)\n      ) {\n        const diff = this.queryInfo.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          // If this diff came from an optimistic transaction, deliver the\n          // current cache data to the ObservableQuery, but don't perform a\n          // reobservation, since oq.reobserveCacheFirst might make a network\n          // request, and we never want to trigger network requests in the\n          // middle of optimistic updates.\n          this.observe();\n        } else {\n          // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n          // using a temporary fetch policy of \"cache-first\", so complete cache\n          // results have a chance to be delivered without triggering additional\n          // network requests, even when options.fetchPolicy is \"network-only\"\n          // or \"cache-and-network\". All other fetch policies are preserved by\n          // this method, and are handled by calling oq.reobserve(). If this\n          // reobservation is spurious, isDifferentFromLastResult still has a\n          // chance to catch it before delivery to ObservableQuery subscribers.\n          this.reobserveCacheFirst();\n        }\n      }\n    }\n\n    this.dirty = false;\n  }\n\n  // Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n  // delivery of any new data from the cache, possibly falling back to the network\n  // if any cache data are missing. This allows _complete_ cache results to be\n  // delivered without also kicking off unnecessary network requests when\n  // this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n  // this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n  // \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\n  private reobserveCacheFirst() {\n    const { fetchPolicy, nextFetchPolicy } = this.options;\n\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n      return this.reobserve({\n        fetchPolicy: \"cache-first\",\n        // Use a temporary nextFetchPolicy function that replaces itself with the\n        // previous nextFetchPolicy value and returns the original fetchPolicy.\n        nextFetchPolicy(\n          this: WatchQueryOptions<TVariables, TData>,\n          currentFetchPolicy: WatchQueryFetchPolicy,\n          context: NextFetchPolicyContext<TData, TVariables>\n        ) {\n          // Replace this nextFetchPolicy function in the options object with the\n          // original this.options.nextFetchPolicy value.\n          this.nextFetchPolicy = nextFetchPolicy;\n          // If the original nextFetchPolicy value was a function, give it a\n          // chance to decide what happens here.\n          if (typeof this.nextFetchPolicy === \"function\") {\n            return this.nextFetchPolicy(currentFetchPolicy, context);\n          }\n          // Otherwise go back to the original this.options.fetchPolicy.\n          return fetchPolicy!;\n        },\n      });\n    }\n\n    return this.reobserve();\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error(\"Unhandled error\", error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction skipCacheDataFor(\n  fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */\n) {\n  return (\n    fetchPolicy === \"network-only\" ||\n    fetchPolicy === \"no-cache\" ||\n    fetchPolicy === \"standby\"\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}