{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { Slot } from \"optimism\";\nimport { invariant, global as untypedGlobal } from \"../globals/index.js\";\nvar muteAllDeprecations = Symbol.for(\"apollo.deprecations\");\nvar global = untypedGlobal;\nvar slot = new Slot();\nfunction isMuted(name) {\n  return global[muteAllDeprecations] || (slot.getValue() || []).includes(name);\n}\nexport function muteDeprecations(name) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  return slot.withValue.apply(slot, __spreadArray([Array.isArray(name) ? name : [name]], args, false));\n}\nexport function warnRemovedOption(options, name, callSite, recommendation) {\n  if (recommendation === void 0) {\n    recommendation = \"Please remove this option.\";\n  }\n  warnDeprecated(name, function () {\n    if (name in options) {\n      globalThis.__DEV__ !== false && invariant.warn(104, callSite, name, recommendation);\n    }\n  });\n}\nexport function warnDeprecated(name, cb) {\n  if (!isMuted(name)) {\n    cb();\n  }\n}\nexport function withDisabledDeprecations() {\n  var _a;\n  var prev = global[muteAllDeprecations];\n  global[muteAllDeprecations] = true;\n  return _a = {}, _a[Symbol.dispose] = function () {\n    global[muteAllDeprecations] = prev;\n  }, _a;\n}","map":{"version":3,"names":["Slot","invariant","global","untypedGlobal","muteAllDeprecations","Symbol","for","slot","isMuted","name","getValue","includes","muteDeprecations","args","_i","arguments","length","withValue","apply","__spreadArray","Array","isArray","warnRemovedOption","options","callSite","recommendation","warnDeprecated","globalThis","__DEV__","warn","cb","withDisabledDeprecations","prev","_a","dispose"],"sources":["/Users/lililyons/WebstormProjects/github-scanner/github-scanner-client/node_modules/@apollo/src/utilities/deprecation/index.ts"],"sourcesContent":["import { Slot } from \"optimism\";\nimport { invariant, global as untypedGlobal } from \"../globals/index.js\";\n\nconst muteAllDeprecations = Symbol.for(\"apollo.deprecations\");\nconst global = untypedGlobal as { [muteAllDeprecations]?: boolean };\n\nconst slot = new Slot<string[]>();\n\ntype WithValueArgs<TResult, TArgs extends any[], TThis> = [\n  callback: (this: TThis, ...args: TArgs) => TResult,\n  args?: TArgs | undefined,\n  thisArg?: TThis | undefined,\n];\n\nexport type PossibleDeprecations = {\n  \"cache.readQuery\": [\"canonizeResults\"];\n  \"cache.readFragment\": [\"canonizeResults\"];\n  \"cache.updateQuery\": [\"canonizeResults\"];\n  \"cache.updateFragment\": [\"canonizeResults\"];\n  InMemoryCache: [\"addTypename\", \"canonizeResults\"];\n  \"cache.read\": [\"canonizeResults\"];\n  \"cache.diff\": [\"canonizeResults\"];\n  \"cache.gc\": [\"resetResultIdentities\"];\n  ApolloClient: [\n    \"connectToDevTools\",\n    \"uri\",\n    \"credentials\",\n    \"headers\",\n    \"name\",\n    \"version\",\n    \"typeDefs\",\n  ];\n  \"client.watchQuery\": [\"canonizeResults\", \"partialRefetch\"];\n  \"client.query\": [\"canonizeResults\", \"notifyOnNetworkStatusChange\"];\n  setOptions: [\"canonizeResults\"];\n  useBackgroundQuery: [\"canonizeResults\"];\n  useFragment: [\"canonizeResults\"];\n  useLazyQuery: [\n    \"canonizeResults\",\n    \"variables\",\n    \"context\",\n    \"onCompleted\",\n    \"onError\",\n    \"defaultOptions\",\n    \"initialFetchPolicy\",\n    \"partialRefetch\",\n  ];\n  \"useLazyQuery.execute\": [\n    \"initialFetchPolicy\",\n    \"onCompleted\",\n    \"onError\",\n    \"defaultOptions\",\n    \"partialRefetch\",\n    \"canonizeResults\",\n    \"query\",\n    \"ssr\",\n    \"client\",\n    \"fetchPolicy\",\n    \"nextFetchPolicy\",\n    \"refetchWritePolicy\",\n    \"errorPolicy\",\n    \"pollInterval\",\n    \"notifyOnNetworkStatusChange\",\n    \"returnPartialData\",\n    \"skipPollAttempt\",\n  ];\n  useLoadableQuery: [\"canonizeResults\"];\n  useMutation: [\"ignoreResults\"];\n  useQuery: [\n    \"canonizeResults\",\n    \"partialRefetch\",\n    \"defaultOptions\",\n    \"onCompleted\",\n    \"onError\",\n  ];\n  useSuspenseQuery: [\"canonizeResults\"];\n  preloadQuery: [\"canonizeResults\"];\n  MockedProvider: [\"connectToDevTools\", \"addTypename\"];\n  ObservableQuery: [\n    \"observableQuery.result\",\n    \"getLastResult\",\n    \"getLastError\",\n    \"resetLastResults\",\n    \"setOptions\",\n  ];\n  HOC: [\n    \"graphql\" | \"withQuery\" | \"withMutation\" | \"withSubscription\",\n    \"parser\",\n  ];\n  RenderProps: [\"<Query />\" | \"<Mutation />\" | \"<Subscription />\"];\n};\n\nexport type DeprecationName =\n  | keyof PossibleDeprecations\n  | NonNullable<PossibleDeprecations[keyof PossibleDeprecations]>[number];\n\nfunction isMuted(name: DeprecationName) {\n  return global[muteAllDeprecations] || (slot.getValue() || []).includes(name);\n}\n\nexport function muteDeprecations<TResult, TArgs extends any[], TThis = any>(\n  name: DeprecationName | DeprecationName[],\n  ...args: WithValueArgs<TResult, TArgs, TThis>\n) {\n  return slot.withValue(Array.isArray(name) ? name : [name], ...args);\n}\n\nexport function warnRemovedOption<\n  TOptions extends Record<string, any>,\n  CallSite extends keyof PossibleDeprecations,\n>(\n  options: TOptions,\n  name: keyof TOptions & PossibleDeprecations[CallSite][number],\n  callSite: CallSite,\n  recommendation: string = \"Please remove this option.\"\n) {\n  warnDeprecated(name as DeprecationName, () => {\n    if (name in options) {\n      invariant.warn(\n        \"[%s]: `%s` is deprecated and will be removed in Apollo Client 4.0. %s\",\n        callSite,\n        name,\n        recommendation\n      );\n    }\n  });\n}\n\nexport function warnDeprecated(name: DeprecationName, cb: () => void) {\n  if (!isMuted(name)) {\n    cb();\n  }\n}\n\nexport function withDisabledDeprecations() {\n  const prev = global[muteAllDeprecations];\n  global[muteAllDeprecations] = true;\n  return {\n    [Symbol.dispose]() {\n      global[muteAllDeprecations] = prev;\n    },\n  };\n}\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,UAAU;AAC/B,SAASC,SAAS,EAAEC,MAAM,IAAIC,aAAa,QAAQ,qBAAqB;AAExE,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,GAAG,CAAC,qBAAqB,CAAC;AAC7D,IAAMJ,MAAM,GAAGC,aAAoD;AAEnE,IAAMI,IAAI,GAAG,IAAIP,IAAI,EAAY;AA0FjC,SAASQ,OAAOA,CAACC,IAAqB;EACpC,OAAOP,MAAM,CAACE,mBAAmB,CAAC,IAAI,CAACG,IAAI,CAACG,QAAQ,EAAE,IAAI,EAAE,EAAEC,QAAQ,CAACF,IAAI,CAAC;AAC9E;AAEA,OAAM,SAAUG,gBAAgBA,CAC9BH,IAAyC;EACzC,IAAAI,IAAA;OAAA,IAAAC,EAAA,IAA6C,EAA7CA,EAAA,GAAAC,SAAA,CAAAC,MAA6C,EAA7CF,EAAA,EAA6C;IAA7CD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAEA,OAAOP,IAAI,CAACU,SAAS,CAAAC,KAAA,CAAdX,IAAI,EAAAY,aAAA,EAAWC,KAAK,CAACC,OAAO,CAACZ,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC,GAAKI,IAAI;AACpE;AAEA,OAAM,SAAUS,iBAAiBA,CAI/BC,OAAiB,EACjBd,IAA6D,EAC7De,QAAkB,EAClBC,cAAqD;EAArD,IAAAA,cAAA;IAAAA,cAAA,+BAAqD;EAAA;EAErDC,cAAc,CAACjB,IAAuB,EAAE;IACtC,IAAIA,IAAI,IAAIc,OAAO,EAAE;MACnBI,UAAU,CAAAC,OACR,cAAA3B,SAAA,CAAA4B,IAAA,MAAAL,QAAA,EAAAf,IAAA,EAAAgB,cAAA;IAKJ;EACF,CAAC,CAAC;AACJ;AAEA,OAAM,SAAUC,cAAcA,CAACjB,IAAqB,EAAEqB,EAAc;EAClE,IAAI,CAACtB,OAAO,CAACC,IAAI,CAAC,EAAE;IAClBqB,EAAE,EAAE;EACN;AACF;AAEA,OAAM,SAAUC,wBAAwBA,CAAA;;EACtC,IAAMC,IAAI,GAAG9B,MAAM,CAACE,mBAAmB,CAAC;EACxCF,MAAM,CAACE,mBAAmB,CAAC,GAAG,IAAI;EAClC,OAAA6B,EAAA,OACEA,EAAA,CAAC5B,MAAM,CAAC6B,OAAO,IAAf;IACEhC,MAAM,CAACE,mBAAmB,CAAC,GAAG4B,IAAI;EACpC,CAAC,E;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}