{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, useWarnRemovedOption, wrapHook } from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nimport { muteDeprecations } from \"../../utilities/deprecation/index.js\";\nexport function useFragment(options) {\n  return wrapHook(\"useFragment\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useFragment_, useApolloClient(options.client))(options);\n}\nfunction useFragment_(options) {\n  if (globalThis.__DEV__ !== false) {\n    // eslint-disable-next-line react-compiler/react-compiler, react-hooks/rules-of-hooks\n    useWarnRemovedOption(options, \"canonizeResults\", \"useFragment\");\n  }\n  var client = useApolloClient(options.client);\n  var cache = client.cache;\n  var from = options.from,\n    rest = __rest(options, [\"from\"]);\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  var id = React.useMemo(function () {\n    return typeof from === \"string\" ? from : from === null ? null : cache.identify(from);\n  }, [cache, from]);\n  var stableOptions = useDeepMemo(function () {\n    return __assign(__assign({}, rest), {\n      from: id\n    });\n  }, [rest, id]);\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  var diff = React.useMemo(function () {\n    var fragment = stableOptions.fragment,\n      fragmentName = stableOptions.fragmentName,\n      from = stableOptions.from,\n      _a = stableOptions.optimistic,\n      optimistic = _a === void 0 ? true : _a;\n    if (from === null) {\n      return {\n        result: diffToResult({\n          result: {},\n          complete: false\n        })\n      };\n    }\n    var cache = client.cache;\n    var diff = muteDeprecations(\"canonizeResults\", function () {\n      return cache.diff(__assign(__assign({}, stableOptions), {\n        returnPartialData: true,\n        id: from,\n        query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n        optimistic: optimistic\n      }));\n    });\n    return {\n      result: diffToResult(__assign(__assign({}, diff), {\n        result: client[\"queryManager\"].maskFragment({\n          fragment: fragment,\n          fragmentName: fragmentName,\n          data: diff.result\n        })\n      }))\n    };\n  }, [client, stableOptions]);\n  // Used for both getSnapshot and getServerSnapshot\n  var getSnapshot = React.useCallback(function () {\n    return diff.result;\n  }, [diff]);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var subscription = muteDeprecations(\"canonizeResults\", function () {\n      return stableOptions.from === null ? null : client.watchFragment(stableOptions).subscribe({\n        next: function (result) {\n          // Since `next` is called async by zen-observable, we want to avoid\n          // unnecessarily rerendering this hook for the initial result\n          // emitted from watchFragment which should be equal to\n          // `diff.result`.\n          if (equal(result, diff.result)) return;\n          diff.result = result;\n          // If we get another update before we've re-rendered, bail out of\n          // the update and try again. This ensures that the relative timing\n          // between useQuery and useFragment stays roughly the same as\n          // fixed in https://github.com/apollographql/apollo-client/pull/11083\n          clearTimeout(lastTimeout);\n          lastTimeout = setTimeout(forceUpdate);\n        }\n      });\n    });\n    return function () {\n      subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [client, stableOptions, diff]), getSnapshot, getSnapshot);\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"names":["React","mergeDeepArray","useApolloClient","useSyncExternalStore","useDeepMemo","useWarnRemovedOption","wrapHook","equal","muteDeprecations","useFragment","options","useFragment_","client","globalThis","__DEV__","cache","from","rest","__rest","id","useMemo","identify","stableOptions","__assign","diff","fragment","fragmentName","_a","optimistic","result","diffToResult","complete","returnPartialData","query","maskFragment","data","getSnapshot","useCallback","forceUpdate","lastTimeout","subscription","watchFragment","subscribe","next","clearTimeout","setTimeout","unsubscribe","missing","map","error"],"sources":["/Users/lililyons/WebstormProjects/github-scanner/github-scanner-client/node_modules/@apollo/src/react/hooks/useFragment.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { ApolloClient, OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport {\n  useDeepMemo,\n  useWarnRemovedOption,\n  wrapHook,\n} from \"./internal/index.js\";\nimport equal from \"@wry/equality\";\nimport type { FragmentType, MaybeMasked } from \"../../masking/index.js\";\nimport { muteDeprecations } from \"../../utilities/deprecation/index.js\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | FragmentType<NoInfer<TData>> | string | null;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: MaybeMasked<TData>;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<MaybeMasked<TData>>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  return wrapHook(\n    \"useFragment\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useFragment_,\n    useApolloClient(options.client)\n  )(options);\n}\n\nfunction useFragment_<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  if (__DEV__) {\n    // eslint-disable-next-line react-compiler/react-compiler, react-hooks/rules-of-hooks\n    useWarnRemovedOption(options, \"canonizeResults\", \"useFragment\");\n  }\n  const client = useApolloClient(options.client);\n  const { cache } = client;\n  const { from, ...rest } = options;\n\n  // We calculate the cache id seperately from `stableOptions` because we don't\n  // want changes to non key fields in the `from` property to affect\n  // `stableOptions` and retrigger our subscription. If the cache identifier\n  // stays the same between renders, we want to reuse the existing subscription.\n  const id = React.useMemo(\n    () =>\n      typeof from === \"string\" ? from\n      : from === null ? null\n      : cache.identify(from),\n    [cache, from]\n  );\n\n  const stableOptions = useDeepMemo(() => ({ ...rest, from: id! }), [rest, id]);\n\n  // Since .next is async, we need to make sure that we\n  // get the correct diff on the next render given new diffOptions\n  const diff = React.useMemo(() => {\n    const { fragment, fragmentName, from, optimistic = true } = stableOptions;\n\n    if (from === null) {\n      return {\n        result: diffToResult({\n          result: {} as TData,\n          complete: false,\n        }),\n      };\n    }\n\n    const { cache } = client;\n    const diff = muteDeprecations(\"canonizeResults\", () =>\n      cache.diff<TData>({\n        ...stableOptions,\n        returnPartialData: true,\n        id: from,\n        query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n        optimistic,\n      })\n    );\n\n    return {\n      result: diffToResult({\n        ...diff,\n        result: client[\"queryManager\"].maskFragment({\n          fragment,\n          fragmentName,\n          data: diff.result,\n        }),\n      }),\n    };\n  }, [client, stableOptions]);\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => diff.result, [diff]);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n\n        const subscription = muteDeprecations(\"canonizeResults\", () =>\n          stableOptions.from === null ?\n            null\n          : client.watchFragment(stableOptions).subscribe({\n              next: (result) => {\n                // Since `next` is called async by zen-observable, we want to avoid\n                // unnecessarily rerendering this hook for the initial result\n                // emitted from watchFragment which should be equal to\n                // `diff.result`.\n                if (equal(result, diff.result)) return;\n                diff.result = result;\n                // If we get another update before we've re-rendered, bail out of\n                // the update and try again. This ensures that the relative timing\n                // between useQuery and useFragment stays roughly the same as\n                // fixed in https://github.com/apollographql/apollo-client/pull/11083\n                clearTimeout(lastTimeout);\n                lastTimeout = setTimeout(forceUpdate) as any;\n              },\n            })\n        );\n        return () => {\n          subscription?.unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [client, stableOptions, diff]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}